{"version":3,"sources":["index.js","App.js"],"names":["ReactDOM","render","controller","AbortController","dateOptions","year","month","day","hour","minute","second","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","useState","tickers","tickerId","tickerName","tickerSymbol","tickerPrice","tState","setTState","portfoliocolumns","title","field","positionData","precision","portfolioId","portfolioUnrealisedPL","portfolioRealisedPL","pState","setPState","loadTickers","e","a","tickerlist","fetch","tickresponse","json","tickbody","status","Error","message","data","ticker","push","id","toString","symbol","name","priceresponse","pricebody","length","quote","price","refreshPortfolio","unrealisedPL","response","body","newData","positions","position","positionPL","currencyId","active","priceAtTrade","positionQty","Math","round","_id","tradetime","Date","DateTime","toLocaleTimeString","tradePrice","pl","roundedUnrealisedPL","roundedRealisedPL","realisedPL","toFixed","initPage","useEffect","abort","getPrice","target","value","tickerData","find","enterTrade","window","confirm","postData","document","getElementById","method","headers","JSON","stringify","post","updateCacheFile","textContent","resetPortfolio","setTimeout","getOptions","map","className","icons","columns","editable","onRowDelete","oldData","Promise","resolve","then","currentPriceRes","USD","alert","onChange","type","Button","variant","color","onClick"],"mappings":"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","file":"static/js/main.bf9de0c6.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { forwardRef, useState, useEffect }  from 'react';\nimport MaterialTable from 'material-table';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport Button from '@material-ui/core/Button';\n\nimport './App.css';\n\n\n/**\n* This is main export for the app.  Using a functional component and useEffect to access hooks.\n*/\n\nexport default function App() {\n\n  const controller = new AbortController();\n\n  const dateOptions = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric' }\n\n  const tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n  };\n\n  const currency = 'USD'\n  const currencySymbol = '$'\n\n  const [tState, setTState] = useState({\n    tickers: [ { } ],\n    tickerId: '',\n    tickerName: '',\n    tickerSymbol: '',\n    tickerPrice: '',\n  });\n\n  const [pState, setPState] = useState({\n    portfoliocolumns: [ { title: 'Trade time', field: 'tradetime' },{ title: 'Name', field: 'name' },{ title: 'Symbol', field: 'symbol' },{ title: 'Position', field: 'position' },{ title: 'Price at trade ('+currencySymbol+')', field: 'tradePrice' },{ title: 'Active', field: 'active' },{ title: 'Unrealised P&L  ('+currencySymbol+')', field: 'pl' } ],\n    positionData: [ { } ],\n    precision: 2,\n    portfolioId: 0,\n    portfolioUnrealisedPL: 0,\n    portfolioRealisedPL: 0,\n  });\n\n  /**\n  * Async function to retrieve ticker list and populate to state, and get the price for the first currency to display to the user.\n  */\n  const loadTickers = async e => {\n    let tickers = [...tState.tickers]\n    let tickerlist = []\n    const tickresponse = await fetch('/api/get?command=getTickers')\n    const tickbody = await tickresponse.json()\n    if (tickresponse.status !== 200) {\n      throw Error(tickbody.message)\n    }\n    for ( let ticker of tickbody[0].data) {\n      tickerlist.push(ticker)\n    }\n    tickers=tickerlist\n\n    let tickerId = [...tState.tickerId]\n    tickerId=tickbody[0].data[0].id.toString()\n    let tickerSymbol = [...tState.tickerSymbol]\n    tickerSymbol=tickbody[0].data[0].symbol\n    let tickerName = [...tState.tickerName]\n    tickerName=tickbody[0].data[0].name\n\n    let tickerPrice = [...tState.tickerPrice]\n    const priceresponse = await fetch('/api/get?command=getPrice&tickerId='+tickerId)\n    const pricebody = await priceresponse.json()\n    if (priceresponse.status !== 200) {\n      throw Error(pricebody.message)\n    } else {\n      if(pricebody.length>0) {\n        tickerPrice=pricebody[0].data[0].quote[currency].price.toString()\n      }\n      setTState({ ...tState, tickers, tickerPrice, tickerId, tickerSymbol, tickerName })\n    }\n  }\n\n  /**\n  * Async function to retrieve portfolio list and populate to state, and calculate P&L on the fly for live positions.\n  */\n  const refreshPortfolio = async e => {\n    let positionData = [...pState.positionData]\n    // convert stored integers to strings to remain iterable\n    let portfolioUnrealisedPL = [...pState.portfolioUnrealisedPL.toString()]\n    let portfolioRealisedPL = [...pState.portfolioRealisedPL.toString()]\n    positionData=[]\n    let unrealisedPL=0\n    const response = await fetch('/api/get?command=getPortfolio&portfolio='+pState.portfolioId)\n    const body = await response.json()\n    if (response.status !== 200) {\n      throw Error(body.message)\n    } else {\n      let newData=[]\n      for ( let position of body[0].positions) {\n        let tickerPrice,positionPL=0;\n        const priceresponse = await fetch('/api/get?command=getPrice&tickerId='+position.currencyId)\n        const pricebody = await priceresponse.json()\n        if (priceresponse.status !== 200) {\n          throw Error(pricebody.message)\n        } else {\n          if(pricebody.length>0) {\n            tickerPrice=pricebody[0].data[0].quote[currency].price.toString()\n          }\n          // Only aggregate P&L for active positions\n          if(position.active) {\n            // Calculate P&L - current price - price at trade * position qty\n            unrealisedPL=unrealisedPL+(tickerPrice-position.priceAtTrade)*position.positionQty\n            // Round for display\n            positionPL=Math.round((((tickerPrice-position.priceAtTrade)*position.positionQty) + 0.00001) * 100) / 100\n          }\n          // Push each position up to the newData array\n          newData.push({\n            id: position._id,\n            portfolioId: body[0].portfolioId,\n            tradetime: new Date(position.DateTime).toLocaleTimeString(\"en-GB\" , dateOptions ),\n            currencyId: position.currencyId,\n            name: position.name,\n            symbol: position.symbol,\n            position: position.positionQty,\n            tradePrice: position.priceAtTrade,\n            active: position.active.toString(),\n            pl:positionPL.toString()\n          })\n        }\n      }\n      // Set newData into positionData state for setting\n      positionData=newData\n      // Round for display\n      let roundedUnrealisedPL = Math.round((unrealisedPL + 0.00001) * 100) / 100\n      let roundedRealisedPL = Math.round((body[0].realisedPL + 0.00001) * 100) / 100;\n      portfolioUnrealisedPL=roundedUnrealisedPL.toFixed(pState.precision).toString()\n      portfolioRealisedPL=roundedRealisedPL.toFixed(pState.precision).toString()\n      setPState({ ...pState, positionData, portfolioUnrealisedPL, portfolioRealisedPL})\n    }\n  }\n\n  const initPage = async () => {\n    loadTickers()\n    refreshPortfolio()\n  };\n\n  useEffect(() => { initPage(); return () => { controller.abort(); } }, []);\n\n  /**\n  * Async function to retrieve price data for a ticker defined by the CMC ID.\n  */\n  const getPrice = async e => {\n    let tickerId =[...tState.tickerId]\n    tickerId=e.target.value\n    let tickerData = tState.tickers.find(tickerData => tickerData.id == tickerId);\n    let tickerSymbol = [...tState.tickerSymbol]\n    tickerSymbol = tickerData.symbol\n    let tickerName = [...tState.tickerName]\n    tickerName = tickerData.name\n\n    let tickerPrice = [...tState.tickerPrice]\n    const response = await fetch('/api/get?command=getPrice&tickerId='+tickerId)\n    const body = await response.json()\n    if (response.status !== 200) {\n      throw Error(body.message)\n    } else {\n      if(body.length>0) {\n        tickerPrice=body[0].data[0].quote[currency].price.toString()\n        setTState({ ...tState, tickerId, tickerPrice,tickerName, tickerSymbol })\n      }\n    }\n  }\n\n  /**\n  * Async function to enter trade data using the selected currency and input position data.\n  */\n  const enterTrade = async e => {\n    if (window.confirm (\"Are you sure?\")) {\n      let postData = []\n      postData.push({\"portfolioId\": pState.portfolioId})\n      postData.push({\"tradeDate\": new Date()})\n      postData.push({\"positionQty\":document.getElementById(\"positionQty\").value})\n      postData.push({\"tickerId\":tState.tickerId})\n      postData.push({\"tickerName\":tState.tickerName})\n      postData.push({\"tickerSymbol\":tState.tickerSymbol})\n      postData.push({\"tickerPrice\":tState.tickerPrice})\n\n      const response = await fetch('/api/post?command=newPosition', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ post: postData }),\n      })\n      const body = await response\n      if (response.status !== 200) {\n        throw Error(body.message)\n      } else {\n        refreshPortfolio()\n      }\n    }\n  }\n\n  /**\n  * Async function to reset the cache file in the database based on the button value.\n  */\n  const updateCacheFile = async e => {\n    const response = await fetch('/api/get?command=cmcCache&file='+e.target.textContent)\n    const body = await response.json()\n    if (response.status !== 200) {\n      throw Error(body.message)\n    } else {\n      loadTickers()\n      let tickers=[];\n      setTState({...tState, tickers})\n      refreshPortfolio()\n    }\n  }\n\n  /**\n  * Async function to reset the portfolio view in the database completely.\n  */\n  const resetPortfolio = async e => {\n    if (window.confirm (\"Are you sure?\")) {\n      let postData = []\n      postData.push({\"portfolioId\": pState.portfolioId})\n      const response = await fetch('/api/post?command=resetPortfolio', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ post: postData }),\n      })\n      const body = await response\n      if (response.status !== 200) {\n        throw Error(body.message)\n      } else {\n        setTimeout(() => {\n          refreshPortfolio()\n        }, 250);\n      }\n    }\n  }\n\n  const getOptions = tState.tickers.map(\n    (ticker) => <option value={ticker.id}>{ticker.name}</option>\n  )\n\n  return (\n    <div>\n    {/* Headlines */}\n    <div className=\"outerDiv\">\n    <div className=\"leftDiv\"><h2>CryptoDash</h2></div>\n    <div className=\"midDiv\"><h4>Unrealised P&L Total: {currencySymbol+''+pState.portfolioUnrealisedPL}</h4></div>\n    <div className=\"rightDiv\"><h4>Realised P&L Total: {currencySymbol+''+pState.portfolioRealisedPL}</h4></div>\n    </div>\n\n    {/* Portfolio view table */}\n    <MaterialTable\n    title='Portfolio View'\n    icons={tableIcons}\n    columns={pState.portfoliocolumns}\n    data={pState.positionData}\n    editable={{\n      onRowDelete: oldData =>\n      new Promise(resolve => {\n        if(oldData.active==='true') {\n          setTimeout(() => {\n            fetch('/api/get?command=getPrice&tickerId='+oldData.currencyId, { } )\n            .then(function(response) {\n              return response.json();\n            })\n            .then(function(currentPriceRes) {\n              let postData = []\n              postData.push({\"portfolioId\": oldData.portfolioId})\n              postData.push({\"positionId\": oldData.id})\n              postData.push({\"realisedPL\": (currentPriceRes[0].data[0].quote.USD.price-oldData.tradePrice)*oldData.position})\n              fetch('/api/post?command=exitPosition', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ post: postData }),\n              })\n              .then(function(response) {\n                refreshPortfolio()\n                resolve();\n              })\n            })\n          }, 250);\n        } else {\n          alert(\"You cannot exit a closed position.\")\n          resolve();\n        }\n      }),\n    }}\n    />\n\n    {/* Trade entry and system control */}\n    <table>\n    <tbody>\n    <tr><td><h3>Trade Entry</h3></td></tr>\n    <tr><td>Select currency</td><td><select onChange={getPrice}>{getOptions}</select></td></tr>\n    <tr><td>Price of currency ({currency})</td><td id='tickerPrice'>{currencySymbol+''+tState.tickerPrice}</td></tr>\n    <tr><td>Position quantity</td><td><input id='positionQty' type='text' /></td></tr>\n    <tr><td></td><td><Button variant=\"contained\" color=\"primary\" onClick={enterTrade}>Trade</Button></td></tr>\n    <tr><td><h3>System Control</h3></td></tr>\n    <tr><td>Reload cache from sandbox</td><td><Button variant=\"contained\" color=\"primary\" onClick={updateCacheFile}>coinmarketcap.json</Button></td></tr>\n    <tr><td>Reload cache from pro</td><td><Button variant=\"contained\" color=\"primary\" onClick={updateCacheFile}>pro.coinmarketcap.json</Button></td></tr>\n    <tr><td>Reset portfolio</td><td><Button variant=\"contained\" color=\"primary\" onClick={resetPortfolio}>Zero positions</Button></td></tr>\n    </tbody>\n    </table>\n\n    </div>\n  )\n}\n"],"sourceRoot":""}